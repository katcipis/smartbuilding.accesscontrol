// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `BookDescription.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

/**
 * A description of a book.
 * 
 **/
public class BookDescription implements java.lang.Cloneable, java.io.Serializable
{
    /**
     * The ISBN number of the book.
     **/
    public String isbn;

    /**
     * The title of the book.
     **/
    public String title;

    /**
     * The authors of the book.
     **/
    public java.util.List<String> authors;

    /**
     * The customer name of the renter.
     **/
    public String rentedBy;

    /**
     * A proxy to the associated book.
     **/
    public BookPrx proxy;

    public BookDescription()
    {
    }

    public BookDescription(String isbn, String title, java.util.List<String> authors, String rentedBy, BookPrx proxy)
    {
        this.isbn = isbn;
        this.title = title;
        this.authors = authors;
        this.rentedBy = rentedBy;
        this.proxy = proxy;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        BookDescription _r = null;
        try
        {
            _r = (BookDescription)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(isbn != _r.isbn)
            {
                if(isbn == null || _r.isbn == null || !isbn.equals(_r.isbn))
                {
                    return false;
                }
            }
            if(title != _r.title)
            {
                if(title == null || _r.title == null || !title.equals(_r.title))
                {
                    return false;
                }
            }
            if(authors != _r.authors)
            {
                if(authors == null || _r.authors == null || !authors.equals(_r.authors))
                {
                    return false;
                }
            }
            if(rentedBy != _r.rentedBy)
            {
                if(rentedBy == null || _r.rentedBy == null || !rentedBy.equals(_r.rentedBy))
                {
                    return false;
                }
            }
            if(proxy != _r.proxy)
            {
                if(proxy == null || _r.proxy == null || !proxy.equals(_r.proxy))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        if(isbn != null)
        {
            __h = 5 * __h + isbn.hashCode();
        }
        if(title != null)
        {
            __h = 5 * __h + title.hashCode();
        }
        if(authors != null)
        {
            __h = 5 * __h + authors.hashCode();
        }
        if(rentedBy != null)
        {
            __h = 5 * __h + rentedBy.hashCode();
        }
        if(proxy != null)
        {
            __h = 5 * __h + proxy.hashCode();
        }
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(isbn);
        __os.writeString(title);
        if(authors == null)
        {
            __os.writeSize(0);
        }
        else
        {
            __os.writeSize(authors.size());
            for(String __elem : authors)
            {
                __os.writeString(__elem);
            }
        }
        __os.writeString(rentedBy);
        BookPrxHelper.__write(__os, proxy);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        isbn = __is.readString();
        title = __is.readString();
        authors = new java.util.LinkedList<String>();
        final int __len0 = __is.readAndCheckSeqSize(1);
        for(int __i0 = 0; __i0 < __len0; __i0++)
        {
            String __elem;
            __elem = __is.readString();
            authors.add(__elem);
        }
        rentedBy = __is.readString();
        proxy = BookPrxHelper.__read(__is);
    }
}
