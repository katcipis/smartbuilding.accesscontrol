// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Glacier2SessionPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

/**
 * The session object. This is used to retrieve a per-session library
 * on behalf of the client. If the session is not refreshed on a
 * periodic basis, it will be automatically destroyed.
 * 
 **/
public final class Glacier2SessionPrxHelper extends Ice.ObjectPrxHelperBase implements Glacier2SessionPrx
{
    /**
     * Get the library object.
     * 
     * @return A proxy for the new library.
     * 
     **/
    public LibraryPrx
    getLibrary()
    {
        return getLibrary(null, false);
    }

    /**
     * Get the library object.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for the new library.
     * 
     **/
    public LibraryPrx
    getLibrary(java.util.Map<String, String> __ctx)
    {
        return getLibrary(__ctx, true);
    }

    private LibraryPrx
    getLibrary(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLibrary");
                __delBase = __getDelegate(false);
                _Glacier2SessionDel __del = (_Glacier2SessionDel)__delBase;
                return __del.getLibrary(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getLibrary_name = "getLibrary";

    /**
     * Get the library object.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getLibrary()
    {
        return begin_getLibrary(null, false, null);
    }

    /**
     * Get the library object.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLibrary(java.util.Map<String, String> __ctx)
    {
        return begin_getLibrary(__ctx, true, null);
    }

    /**
     * Get the library object.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getLibrary(Ice.Callback __cb)
    {
        return begin_getLibrary(null, false, __cb);
    }

    /**
     * Get the library object.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLibrary(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLibrary(__ctx, true, __cb);
    }

    /**
     * Get the library object.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getLibrary(Callback_Glacier2Session_getLibrary __cb)
    {
        return begin_getLibrary(null, false, __cb);
    }

    /**
     * Get the library object.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLibrary(java.util.Map<String, String> __ctx, Callback_Glacier2Session_getLibrary __cb)
    {
        return begin_getLibrary(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLibrary(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLibrary_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLibrary_name, __cb);
        try
        {
            __result.__prepare(__getLibrary_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) A proxy for the new library.
     * 
     **/
    public LibraryPrx end_getLibrary(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getLibrary_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        LibraryPrx __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = LibraryPrxHelper.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     **/
    public void
    refresh()
    {
        refresh(null, false);
    }

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    refresh(java.util.Map<String, String> __ctx)
    {
        refresh(__ctx, true);
    }

    private void
    refresh(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _Glacier2SessionDel __del = (_Glacier2SessionDel)__delBase;
                __del.refresh(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __refresh_name = "refresh";

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refresh()
    {
        return begin_refresh(null, false, null);
    }

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refresh(java.util.Map<String, String> __ctx)
    {
        return begin_refresh(__ctx, true, null);
    }

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refresh(Ice.Callback __cb)
    {
        return begin_refresh(null, false, __cb);
    }

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refresh(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_refresh(__ctx, true, __cb);
    }

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refresh(Callback_Glacier2Session_refresh __cb)
    {
        return begin_refresh(null, false, __cb);
    }

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refresh(java.util.Map<String, String> __ctx, Callback_Glacier2Session_refresh __cb)
    {
        return begin_refresh(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_refresh(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __refresh_name, __cb);
        try
        {
            __result.__prepare(__refresh_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_refresh(Ice.AsyncResult __result)
    {
        __end(__result, __refresh_name);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     **/
    public void
    destroy()
    {
        destroy(null, false);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    destroy(java.util.Map<String, String> __ctx)
    {
        destroy(__ctx, true);
    }

    private void
    destroy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _Glacier2SessionDel __del = (_Glacier2SessionDel)__delBase;
                __del.destroy(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __destroy_name = "destroy";

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy()
    {
        return begin_destroy(null, false, null);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx)
    {
        return begin_destroy(__ctx, true, null);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy(Ice.Callback __cb)
    {
        return begin_destroy(null, false, __cb);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_destroy(__ctx, true, __cb);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy(Glacier2.Callback_Session_destroy __cb)
    {
        return begin_destroy(null, false, __cb);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Glacier2.Callback_Session_destroy __cb)
    {
        return begin_destroy(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __destroy_name, __cb);
        try
        {
            __result.__prepare(__destroy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_destroy(Ice.AsyncResult __result)
    {
        __end(__result, __destroy_name);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public boolean
    destroy_async(Glacier2.AMI_Session_destroy __cb)
    {
        Ice.AsyncResult __r = begin_destroy(null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean
    destroy_async(Glacier2.AMI_Session_destroy __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_destroy(__ctx, true, __cb);
        return __r.sentSynchronously();
    }

    public static Glacier2SessionPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        Glacier2SessionPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (Glacier2SessionPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    Glacier2SessionPrxHelper __h = new Glacier2SessionPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static Glacier2SessionPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        Glacier2SessionPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (Glacier2SessionPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    Glacier2SessionPrxHelper __h = new Glacier2SessionPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static Glacier2SessionPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        Glacier2SessionPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    Glacier2SessionPrxHelper __h = new Glacier2SessionPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static Glacier2SessionPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        Glacier2SessionPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    Glacier2SessionPrxHelper __h = new Glacier2SessionPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static Glacier2SessionPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        Glacier2SessionPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (Glacier2SessionPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                Glacier2SessionPrxHelper __h = new Glacier2SessionPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static Glacier2SessionPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        Glacier2SessionPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            Glacier2SessionPrxHelper __h = new Glacier2SessionPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Demo::Glacier2Session",
        "::Glacier2::Session",
        "::Ice::Object"
    };

    public static String
    ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _Glacier2SessionDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _Glacier2SessionDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, Glacier2SessionPrx v)
    {
        __os.writeProxy(v);
    }

    public static Glacier2SessionPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            Glacier2SessionPrxHelper result = new Glacier2SessionPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
