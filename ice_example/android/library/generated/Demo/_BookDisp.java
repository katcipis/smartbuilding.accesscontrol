// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_BookDisp.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

/**
 * This interface represents a book.
 * 
 **/
public abstract class _BookDisp extends Ice.ObjectImpl implements Book
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Demo::Book",
        "::Ice::Object"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[0];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[0];
    }

    public static String
    ice_staticId()
    {
        return __ids[0];
    }

    /**
     * Get a description of the book.
     * 
     * @return The book description.
     * 
     **/
    public final BookDescription
    describe()
    {
        return describe(null);
    }

    /**
     * Destroy the book.
     * 
     **/
    public final void
    destroy()
    {
        destroy(null);
    }

    /**
     * Get the renter.
     * 
     * @return The current rental customer.
     * 
     * @throws BookNotRentedException Raised if the book is not
     * currently rented.
     * 
     **/
    public final String
    getRenter()
        throws BookNotRentedException
    {
        return getRenter(null);
    }

    /**
     * Rent the book to the specified customer.
     * 
     * @param customer The customer.
     * 
     * @throws BookRentedException Raised if the book has already been
     * rented.
     * 
     * @throws InvalidCustomerException Raised if the customer is invalid.
     * 
     **/
    public final void
    rentBook(String name)
        throws BookRentedException,
               InvalidCustomerException
    {
        rentBook(name, null);
    }

    /**
     * Return the book.
     * 
     * @throws BookNotRentedException Raised if the book is not
     * currently rented.
     * 
     **/
    public final void
    returnBook()
        throws BookNotRentedException
    {
        returnBook(null);
    }

    /**
     * Set the book authors.
     * 
     * @param authors The book authors.
     * 
     **/
    public final void
    setAuthors(java.util.List<String> authors)
    {
        setAuthors(authors, null);
    }

    /**
     * Set the title of a book.
     * 
     * @param title The book title.
     * 
     **/
    public final void
    setTitle(String title)
    {
        setTitle(title, null);
    }

    public static Ice.DispatchStatus
    ___describe(Book __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        BookDescription __ret = __obj.describe(__current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setTitle(Book __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String title;
        title = __is.readString();
        __is.endReadEncaps();
        __obj.setTitle(title, __current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setAuthors(Book __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        java.util.List<String> authors;
        authors = new java.util.LinkedList<String>();
        final int __len0 = __is.readAndCheckSeqSize(1);
        for(int __i0 = 0; __i0 < __len0; __i0++)
        {
            String __elem;
            __elem = __is.readString();
            authors.add(__elem);
        }
        __is.endReadEncaps();
        __obj.setAuthors(authors, __current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___rentBook(Book __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String name;
        name = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            __obj.rentBook(name, __current);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(BookRentedException ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(InvalidCustomerException ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus
    ___getRenter(Book __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            String __ret = __obj.getRenter(__current);
            __os.writeString(__ret);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(BookNotRentedException ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus
    ___returnBook(Book __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            __obj.returnBook(__current);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(BookNotRentedException ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus
    ___destroy(Book __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        __obj.destroy(__current);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "describe",
        "destroy",
        "getRenter",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "rentBook",
        "returnBook",
        "setAuthors",
        "setTitle"
    };

    public Ice.DispatchStatus
    __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___describe(this, in, __current);
            }
            case 1:
            {
                return ___destroy(this, in, __current);
            }
            case 2:
            {
                return ___getRenter(this, in, __current);
            }
            case 3:
            {
                return ___ice_id(this, in, __current);
            }
            case 4:
            {
                return ___ice_ids(this, in, __current);
            }
            case 5:
            {
                return ___ice_isA(this, in, __current);
            }
            case 6:
            {
                return ___ice_ping(this, in, __current);
            }
            case 7:
            {
                return ___rentBook(this, in, __current);
            }
            case 8:
            {
                return ___returnBook(this, in, __current);
            }
            case 9:
            {
                return ___setAuthors(this, in, __current);
            }
            case 10:
            {
                return ___setTitle(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type Demo::Book was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type Demo::Book was not generated with stream support";
        throw ex;
    }
}
