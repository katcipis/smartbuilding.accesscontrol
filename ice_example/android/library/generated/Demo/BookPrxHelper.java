// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `BookPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

/**
 * This interface represents a book.
 * 
 **/
public final class BookPrxHelper extends Ice.ObjectPrxHelperBase implements BookPrx
{
    /**
     * Get a description of the book.
     * 
     * @return The book description.
     * 
     **/
    public BookDescription
    describe()
    {
        return describe(null, false);
    }

    /**
     * Get a description of the book.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The book description.
     * 
     **/
    public BookDescription
    describe(java.util.Map<String, String> __ctx)
    {
        return describe(__ctx, true);
    }

    private BookDescription
    describe(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("describe");
                __delBase = __getDelegate(false);
                _BookDel __del = (_BookDel)__delBase;
                return __del.describe(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __describe_name = "describe";

    /**
     * Get a description of the book.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_describe()
    {
        return begin_describe(null, false, null);
    }

    /**
     * Get a description of the book.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_describe(java.util.Map<String, String> __ctx)
    {
        return begin_describe(__ctx, true, null);
    }

    /**
     * Get a description of the book.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_describe(Ice.Callback __cb)
    {
        return begin_describe(null, false, __cb);
    }

    /**
     * Get a description of the book.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_describe(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_describe(__ctx, true, __cb);
    }

    /**
     * Get a description of the book.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_describe(Callback_Book_describe __cb)
    {
        return begin_describe(null, false, __cb);
    }

    /**
     * Get a description of the book.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_describe(java.util.Map<String, String> __ctx, Callback_Book_describe __cb)
    {
        return begin_describe(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_describe(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__describe_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __describe_name, __cb);
        try
        {
            __result.__prepare(__describe_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) The book description.
     * 
     **/
    public BookDescription end_describe(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __describe_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        BookDescription __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new BookDescription();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * Destroy the book.
     * 
     **/
    public void
    destroy()
    {
        destroy(null, false);
    }

    /**
     * Destroy the book.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    destroy(java.util.Map<String, String> __ctx)
    {
        destroy(__ctx, true);
    }

    private void
    destroy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _BookDel __del = (_BookDel)__delBase;
                __del.destroy(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __destroy_name = "destroy";

    /**
     * Destroy the book.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy()
    {
        return begin_destroy(null, false, null);
    }

    /**
     * Destroy the book.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx)
    {
        return begin_destroy(__ctx, true, null);
    }

    /**
     * Destroy the book.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy(Ice.Callback __cb)
    {
        return begin_destroy(null, false, __cb);
    }

    /**
     * Destroy the book.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_destroy(__ctx, true, __cb);
    }

    /**
     * Destroy the book.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy(Callback_Book_destroy __cb)
    {
        return begin_destroy(null, false, __cb);
    }

    /**
     * Destroy the book.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Callback_Book_destroy __cb)
    {
        return begin_destroy(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __destroy_name, __cb);
        try
        {
            __result.__prepare(__destroy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_destroy(Ice.AsyncResult __result)
    {
        __end(__result, __destroy_name);
    }

    /**
     * Get the renter.
     * 
     * @return The current rental customer.
     * 
     * @throws BookNotRentedException Raised if the book is not
     * currently rented.
     * 
     **/
    public String
    getRenter()
        throws BookNotRentedException
    {
        return getRenter(null, false);
    }

    /**
     * Get the renter.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The current rental customer.
     * 
     * @throws BookNotRentedException Raised if the book is not
     * currently rented.
     * 
     **/
    public String
    getRenter(java.util.Map<String, String> __ctx)
        throws BookNotRentedException
    {
        return getRenter(__ctx, true);
    }

    private String
    getRenter(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws BookNotRentedException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getRenter");
                __delBase = __getDelegate(false);
                _BookDel __del = (_BookDel)__delBase;
                return __del.getRenter(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getRenter_name = "getRenter";

    /**
     * Get the renter.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRenter()
    {
        return begin_getRenter(null, false, null);
    }

    /**
     * Get the renter.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRenter(java.util.Map<String, String> __ctx)
    {
        return begin_getRenter(__ctx, true, null);
    }

    /**
     * Get the renter.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRenter(Ice.Callback __cb)
    {
        return begin_getRenter(null, false, __cb);
    }

    /**
     * Get the renter.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRenter(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRenter(__ctx, true, __cb);
    }

    /**
     * Get the renter.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getRenter(Callback_Book_getRenter __cb)
    {
        return begin_getRenter(null, false, __cb);
    }

    /**
     * Get the renter.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRenter(java.util.Map<String, String> __ctx, Callback_Book_getRenter __cb)
    {
        return begin_getRenter(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRenter(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRenter_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRenter_name, __cb);
        try
        {
            __result.__prepare(__getRenter_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) The current rental customer.
     * 
     **/
    public String end_getRenter(Ice.AsyncResult __result)
        throws BookNotRentedException
    {
        Ice.AsyncResult.__check(__result, this, __getRenter_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(BookNotRentedException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * Rent the book to the specified customer.
     * 
     * @param customer The customer.
     * 
     * @throws BookRentedException Raised if the book has already been
     * rented.
     * 
     * @throws InvalidCustomerException Raised if the customer is invalid.
     * 
     **/
    public void
    rentBook(String name)
        throws BookRentedException,
               InvalidCustomerException
    {
        rentBook(name, null, false);
    }

    /**
     * Rent the book to the specified customer.
     * 
     * @param customer The customer.
     * 
     * @throws BookRentedException Raised if the book has already been
     * rented.
     * 
     * @throws InvalidCustomerException Raised if the customer is invalid.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    rentBook(String name, java.util.Map<String, String> __ctx)
        throws BookRentedException,
               InvalidCustomerException
    {
        rentBook(name, __ctx, true);
    }

    private void
    rentBook(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws BookRentedException,
               InvalidCustomerException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("rentBook");
                __delBase = __getDelegate(false);
                _BookDel __del = (_BookDel)__delBase;
                __del.rentBook(name, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __rentBook_name = "rentBook";

    /**
     * Rent the book to the specified customer.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_rentBook(String name)
    {
        return begin_rentBook(name, null, false, null);
    }

    /**
     * Rent the book to the specified customer.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_rentBook(String name, java.util.Map<String, String> __ctx)
    {
        return begin_rentBook(name, __ctx, true, null);
    }

    /**
     * Rent the book to the specified customer.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_rentBook(String name, Ice.Callback __cb)
    {
        return begin_rentBook(name, null, false, __cb);
    }

    /**
     * Rent the book to the specified customer.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_rentBook(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_rentBook(name, __ctx, true, __cb);
    }

    /**
     * Rent the book to the specified customer.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_rentBook(String name, Callback_Book_rentBook __cb)
    {
        return begin_rentBook(name, null, false, __cb);
    }

    /**
     * Rent the book to the specified customer.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_rentBook(String name, java.util.Map<String, String> __ctx, Callback_Book_rentBook __cb)
    {
        return begin_rentBook(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_rentBook(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__rentBook_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __rentBook_name, __cb);
        try
        {
            __result.__prepare(__rentBook_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_rentBook(Ice.AsyncResult __result)
        throws BookRentedException,
               InvalidCustomerException
    {
        Ice.AsyncResult.__check(__result, this, __rentBook_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(BookRentedException __ex)
            {
                throw __ex;
            }
            catch(InvalidCustomerException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    /**
     * Return the book.
     * 
     * @throws BookNotRentedException Raised if the book is not
     * currently rented.
     * 
     **/
    public void
    returnBook()
        throws BookNotRentedException
    {
        returnBook(null, false);
    }

    /**
     * Return the book.
     * 
     * @throws BookNotRentedException Raised if the book is not
     * currently rented.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    returnBook(java.util.Map<String, String> __ctx)
        throws BookNotRentedException
    {
        returnBook(__ctx, true);
    }

    private void
    returnBook(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws BookNotRentedException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("returnBook");
                __delBase = __getDelegate(false);
                _BookDel __del = (_BookDel)__delBase;
                __del.returnBook(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __returnBook_name = "returnBook";

    /**
     * Return the book.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_returnBook()
    {
        return begin_returnBook(null, false, null);
    }

    /**
     * Return the book.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_returnBook(java.util.Map<String, String> __ctx)
    {
        return begin_returnBook(__ctx, true, null);
    }

    /**
     * Return the book.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_returnBook(Ice.Callback __cb)
    {
        return begin_returnBook(null, false, __cb);
    }

    /**
     * Return the book.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_returnBook(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_returnBook(__ctx, true, __cb);
    }

    /**
     * Return the book.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_returnBook(Callback_Book_returnBook __cb)
    {
        return begin_returnBook(null, false, __cb);
    }

    /**
     * Return the book.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_returnBook(java.util.Map<String, String> __ctx, Callback_Book_returnBook __cb)
    {
        return begin_returnBook(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_returnBook(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__returnBook_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __returnBook_name, __cb);
        try
        {
            __result.__prepare(__returnBook_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_returnBook(Ice.AsyncResult __result)
        throws BookNotRentedException
    {
        Ice.AsyncResult.__check(__result, this, __returnBook_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(BookNotRentedException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    /**
     * Set the book authors.
     * 
     * @param authors The book authors.
     * 
     **/
    public void
    setAuthors(java.util.List<String> authors)
    {
        setAuthors(authors, null, false);
    }

    /**
     * Set the book authors.
     * 
     * @param authors The book authors.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    setAuthors(java.util.List<String> authors, java.util.Map<String, String> __ctx)
    {
        setAuthors(authors, __ctx, true);
    }

    private void
    setAuthors(java.util.List<String> authors, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _BookDel __del = (_BookDel)__delBase;
                __del.setAuthors(authors, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setAuthors_name = "setAuthors";

    /**
     * Set the book authors.
     * 
     * @param __cb The callback object for the operation.
     * @param authors The book authors.
     * 
     **/
    public Ice.AsyncResult begin_setAuthors(java.util.List<String> authors)
    {
        return begin_setAuthors(authors, null, false, null);
    }

    /**
     * Set the book authors.
     * 
     * @param __cb The callback object for the operation.
     * @param authors The book authors.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setAuthors(java.util.List<String> authors, java.util.Map<String, String> __ctx)
    {
        return begin_setAuthors(authors, __ctx, true, null);
    }

    /**
     * Set the book authors.
     * 
     * @param __cb The callback object for the operation.
     * @param authors The book authors.
     * 
     **/
    public Ice.AsyncResult begin_setAuthors(java.util.List<String> authors, Ice.Callback __cb)
    {
        return begin_setAuthors(authors, null, false, __cb);
    }

    /**
     * Set the book authors.
     * 
     * @param __cb The callback object for the operation.
     * @param authors The book authors.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setAuthors(java.util.List<String> authors, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setAuthors(authors, __ctx, true, __cb);
    }

    /**
     * Set the book authors.
     * 
     * @param __cb The callback object for the operation.
     * @param authors The book authors.
     * 
     **/
    public Ice.AsyncResult begin_setAuthors(java.util.List<String> authors, Callback_Book_setAuthors __cb)
    {
        return begin_setAuthors(authors, null, false, __cb);
    }

    /**
     * Set the book authors.
     * 
     * @param __cb The callback object for the operation.
     * @param authors The book authors.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setAuthors(java.util.List<String> authors, java.util.Map<String, String> __ctx, Callback_Book_setAuthors __cb)
    {
        return begin_setAuthors(authors, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setAuthors(java.util.List<String> authors, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setAuthors_name, __cb);
        try
        {
            __result.__prepare(__setAuthors_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            if(authors == null)
            {
                __os.writeSize(0);
            }
            else
            {
                __os.writeSize(authors.size());
                for(String __elem : authors)
                {
                    __os.writeString(__elem);
                }
            }
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_setAuthors(Ice.AsyncResult __result)
    {
        __end(__result, __setAuthors_name);
    }

    /**
     * Set the title of a book.
     * 
     * @param title The book title.
     * 
     **/
    public void
    setTitle(String title)
    {
        setTitle(title, null, false);
    }

    /**
     * Set the title of a book.
     * 
     * @param title The book title.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    setTitle(String title, java.util.Map<String, String> __ctx)
    {
        setTitle(title, __ctx, true);
    }

    private void
    setTitle(String title, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _BookDel __del = (_BookDel)__delBase;
                __del.setTitle(title, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setTitle_name = "setTitle";

    /**
     * Set the title of a book.
     * 
     * @param __cb The callback object for the operation.
     * @param title The book title.
     * 
     **/
    public Ice.AsyncResult begin_setTitle(String title)
    {
        return begin_setTitle(title, null, false, null);
    }

    /**
     * Set the title of a book.
     * 
     * @param __cb The callback object for the operation.
     * @param title The book title.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setTitle(String title, java.util.Map<String, String> __ctx)
    {
        return begin_setTitle(title, __ctx, true, null);
    }

    /**
     * Set the title of a book.
     * 
     * @param __cb The callback object for the operation.
     * @param title The book title.
     * 
     **/
    public Ice.AsyncResult begin_setTitle(String title, Ice.Callback __cb)
    {
        return begin_setTitle(title, null, false, __cb);
    }

    /**
     * Set the title of a book.
     * 
     * @param __cb The callback object for the operation.
     * @param title The book title.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setTitle(String title, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTitle(title, __ctx, true, __cb);
    }

    /**
     * Set the title of a book.
     * 
     * @param __cb The callback object for the operation.
     * @param title The book title.
     * 
     **/
    public Ice.AsyncResult begin_setTitle(String title, Callback_Book_setTitle __cb)
    {
        return begin_setTitle(title, null, false, __cb);
    }

    /**
     * Set the title of a book.
     * 
     * @param __cb The callback object for the operation.
     * @param title The book title.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setTitle(String title, java.util.Map<String, String> __ctx, Callback_Book_setTitle __cb)
    {
        return begin_setTitle(title, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTitle(String title, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTitle_name, __cb);
        try
        {
            __result.__prepare(__setTitle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(title);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_setTitle(Ice.AsyncResult __result)
    {
        __end(__result, __setTitle_name);
    }

    public static BookPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        BookPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (BookPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    BookPrxHelper __h = new BookPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static BookPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        BookPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (BookPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    BookPrxHelper __h = new BookPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static BookPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        BookPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    BookPrxHelper __h = new BookPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static BookPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        BookPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    BookPrxHelper __h = new BookPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static BookPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        BookPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (BookPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                BookPrxHelper __h = new BookPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static BookPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        BookPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            BookPrxHelper __h = new BookPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Demo::Book",
        "::Ice::Object"
    };

    public static String
    ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _BookDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _BookDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, BookPrx v)
    {
        __os.writeProxy(v);
    }

    public static BookPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            BookPrxHelper result = new BookPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
