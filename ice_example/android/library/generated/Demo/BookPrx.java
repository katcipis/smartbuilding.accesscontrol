// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `BookPrx.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

/**
 * This interface represents a book.
 * 
 **/
public interface BookPrx extends Ice.ObjectPrx
{
    /**
     * Get a description of the book.
     * 
     * @return The book description.
     * 
     **/
    public BookDescription describe();

    /**
     * Get a description of the book.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The book description.
     * 
     **/
    public BookDescription describe(java.util.Map<String, String> __ctx);

    /**
     * Get a description of the book.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_describe();

    /**
     * Get a description of the book.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_describe(java.util.Map<String, String> __ctx);

    /**
     * Get a description of the book.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_describe(Ice.Callback __cb);

    /**
     * Get a description of the book.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_describe(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Get a description of the book.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_describe(Callback_Book_describe __cb);

    /**
     * Get a description of the book.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_describe(java.util.Map<String, String> __ctx, Callback_Book_describe __cb);

    /**
     * Get a description of the book.
     * 
     * @param __result The asynchronous result object.
     * @return The book description.
     * 
     **/
    public BookDescription end_describe(Ice.AsyncResult __result);

    /**
     * Set the title of a book.
     * 
     * @param title The book title.
     * 
     **/
    public void setTitle(String title);

    /**
     * Set the title of a book.
     * 
     * @param title The book title.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setTitle(String title, java.util.Map<String, String> __ctx);

    /**
     * Set the title of a book.
     * 
     * @param title The book title.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setTitle(String title);

    /**
     * Set the title of a book.
     * 
     * @param title The book title.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setTitle(String title, java.util.Map<String, String> __ctx);

    /**
     * Set the title of a book.
     * 
     * @param title The book title.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setTitle(String title, Ice.Callback __cb);

    /**
     * Set the title of a book.
     * 
     * @param title The book title.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setTitle(String title, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Set the title of a book.
     * 
     * @param title The book title.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setTitle(String title, Callback_Book_setTitle __cb);

    /**
     * Set the title of a book.
     * 
     * @param title The book title.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setTitle(String title, java.util.Map<String, String> __ctx, Callback_Book_setTitle __cb);

    /**
     * Set the title of a book.
     * 
     * @param __result The asynchronous result object.
     **/
    public void end_setTitle(Ice.AsyncResult __result);

    /**
     * Set the book authors.
     * 
     * @param authors The book authors.
     * 
     **/
    public void setAuthors(java.util.List<String> authors);

    /**
     * Set the book authors.
     * 
     * @param authors The book authors.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setAuthors(java.util.List<String> authors, java.util.Map<String, String> __ctx);

    /**
     * Set the book authors.
     * 
     * @param authors The book authors.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAuthors(java.util.List<String> authors);

    /**
     * Set the book authors.
     * 
     * @param authors The book authors.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAuthors(java.util.List<String> authors, java.util.Map<String, String> __ctx);

    /**
     * Set the book authors.
     * 
     * @param authors The book authors.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAuthors(java.util.List<String> authors, Ice.Callback __cb);

    /**
     * Set the book authors.
     * 
     * @param authors The book authors.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAuthors(java.util.List<String> authors, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Set the book authors.
     * 
     * @param authors The book authors.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAuthors(java.util.List<String> authors, Callback_Book_setAuthors __cb);

    /**
     * Set the book authors.
     * 
     * @param authors The book authors.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAuthors(java.util.List<String> authors, java.util.Map<String, String> __ctx, Callback_Book_setAuthors __cb);

    /**
     * Set the book authors.
     * 
     * @param __result The asynchronous result object.
     **/
    public void end_setAuthors(Ice.AsyncResult __result);

    /**
     * Rent the book to the specified customer.
     * 
     * @param customer The customer.
     * 
     * @throws BookRentedException Raised if the book has already been
     * rented.
     * 
     * @throws InvalidCustomerException Raised if the customer is invalid.
     * 
     **/
    public void rentBook(String name)
        throws BookRentedException,
               InvalidCustomerException;

    /**
     * Rent the book to the specified customer.
     * 
     * @param customer The customer.
     * 
     * @throws BookRentedException Raised if the book has already been
     * rented.
     * 
     * @throws InvalidCustomerException Raised if the customer is invalid.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void rentBook(String name, java.util.Map<String, String> __ctx)
        throws BookRentedException,
               InvalidCustomerException;

    /**
     * Rent the book to the specified customer.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_rentBook(String name);

    /**
     * Rent the book to the specified customer.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_rentBook(String name, java.util.Map<String, String> __ctx);

    /**
     * Rent the book to the specified customer.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_rentBook(String name, Ice.Callback __cb);

    /**
     * Rent the book to the specified customer.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_rentBook(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Rent the book to the specified customer.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_rentBook(String name, Callback_Book_rentBook __cb);

    /**
     * Rent the book to the specified customer.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_rentBook(String name, java.util.Map<String, String> __ctx, Callback_Book_rentBook __cb);

    /**
     * Rent the book to the specified customer.
     * 
     * @param __result The asynchronous result object.
     * @throws BookRentedException Raised if the book has already been
     * rented.
     * 
     * @throws InvalidCustomerException Raised if the customer is invalid.
     * 
     **/
    public void end_rentBook(Ice.AsyncResult __result)
        throws BookRentedException,
               InvalidCustomerException;

    /**
     * Get the renter.
     * 
     * @return The current rental customer.
     * 
     * @throws BookNotRentedException Raised if the book is not
     * currently rented.
     * 
     **/
    public String getRenter()
        throws BookNotRentedException;

    /**
     * Get the renter.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The current rental customer.
     * 
     * @throws BookNotRentedException Raised if the book is not
     * currently rented.
     * 
     **/
    public String getRenter(java.util.Map<String, String> __ctx)
        throws BookNotRentedException;

    /**
     * Get the renter.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRenter();

    /**
     * Get the renter.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRenter(java.util.Map<String, String> __ctx);

    /**
     * Get the renter.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRenter(Ice.Callback __cb);

    /**
     * Get the renter.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRenter(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Get the renter.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRenter(Callback_Book_getRenter __cb);

    /**
     * Get the renter.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRenter(java.util.Map<String, String> __ctx, Callback_Book_getRenter __cb);

    /**
     * Get the renter.
     * 
     * @param __result The asynchronous result object.
     * @return The current rental customer.
     * 
     * @throws BookNotRentedException Raised if the book is not
     * currently rented.
     * 
     **/
    public String end_getRenter(Ice.AsyncResult __result)
        throws BookNotRentedException;

    /**
     * Return the book.
     * 
     * @throws BookNotRentedException Raised if the book is not
     * currently rented.
     * 
     **/
    public void returnBook()
        throws BookNotRentedException;

    /**
     * Return the book.
     * 
     * @throws BookNotRentedException Raised if the book is not
     * currently rented.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void returnBook(java.util.Map<String, String> __ctx)
        throws BookNotRentedException;

    /**
     * Return the book.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_returnBook();

    /**
     * Return the book.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_returnBook(java.util.Map<String, String> __ctx);

    /**
     * Return the book.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_returnBook(Ice.Callback __cb);

    /**
     * Return the book.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_returnBook(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Return the book.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_returnBook(Callback_Book_returnBook __cb);

    /**
     * Return the book.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_returnBook(java.util.Map<String, String> __ctx, Callback_Book_returnBook __cb);

    /**
     * Return the book.
     * 
     * @param __result The asynchronous result object.
     * @throws BookNotRentedException Raised if the book is not
     * currently rented.
     * 
     **/
    public void end_returnBook(Ice.AsyncResult __result)
        throws BookNotRentedException;

    /**
     * Destroy the book.
     * 
     **/
    public void destroy();

    /**
     * Destroy the book.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void destroy(java.util.Map<String, String> __ctx);

    /**
     * Destroy the book.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_destroy();

    /**
     * Destroy the book.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx);

    /**
     * Destroy the book.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_destroy(Ice.Callback __cb);

    /**
     * Destroy the book.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Destroy the book.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_destroy(Callback_Book_destroy __cb);

    /**
     * Destroy the book.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Callback_Book_destroy __cb);

    /**
     * Destroy the book.
     * 
     * @param __result The asynchronous result object.
     **/
    public void end_destroy(Ice.AsyncResult __result);
}
