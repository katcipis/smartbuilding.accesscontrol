// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `LibraryPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

/**
 * An interface to the library.
 * 
 **/
public final class LibraryPrxHelper extends Ice.ObjectPrxHelperBase implements LibraryPrx
{
    /**
     * Create a book with the given description.
     * 
     * @param description The book description.
     * 
     * @return A proxy for the new book.
     * 
     * @throws BookExistsException Raised if a book with the same ISBN
     * number already exists.
     * 
     **/
    public BookPrx
    createBook(String isbn, String title, java.util.List<String> authors)
        throws BookExistsException
    {
        return createBook(isbn, title, authors, null, false);
    }

    /**
     * Create a book with the given description.
     * 
     * @param description The book description.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for the new book.
     * 
     * @throws BookExistsException Raised if a book with the same ISBN
     * number already exists.
     * 
     **/
    public BookPrx
    createBook(String isbn, String title, java.util.List<String> authors, java.util.Map<String, String> __ctx)
        throws BookExistsException
    {
        return createBook(isbn, title, authors, __ctx, true);
    }

    private BookPrx
    createBook(String isbn, String title, java.util.List<String> authors, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws BookExistsException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("createBook");
                __delBase = __getDelegate(false);
                _LibraryDel __del = (_LibraryDel)__delBase;
                return __del.createBook(isbn, title, authors, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __createBook_name = "createBook";

    /**
     * Create a book with the given description.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_createBook(String isbn, String title, java.util.List<String> authors)
    {
        return begin_createBook(isbn, title, authors, null, false, null);
    }

    /**
     * Create a book with the given description.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_createBook(String isbn, String title, java.util.List<String> authors, java.util.Map<String, String> __ctx)
    {
        return begin_createBook(isbn, title, authors, __ctx, true, null);
    }

    /**
     * Create a book with the given description.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_createBook(String isbn, String title, java.util.List<String> authors, Ice.Callback __cb)
    {
        return begin_createBook(isbn, title, authors, null, false, __cb);
    }

    /**
     * Create a book with the given description.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_createBook(String isbn, String title, java.util.List<String> authors, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createBook(isbn, title, authors, __ctx, true, __cb);
    }

    /**
     * Create a book with the given description.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_createBook(String isbn, String title, java.util.List<String> authors, Callback_Library_createBook __cb)
    {
        return begin_createBook(isbn, title, authors, null, false, __cb);
    }

    /**
     * Create a book with the given description.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_createBook(String isbn, String title, java.util.List<String> authors, java.util.Map<String, String> __ctx, Callback_Library_createBook __cb)
    {
        return begin_createBook(isbn, title, authors, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_createBook(String isbn, String title, java.util.List<String> authors, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__createBook_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __createBook_name, __cb);
        try
        {
            __result.__prepare(__createBook_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(isbn);
            __os.writeString(title);
            if(authors == null)
            {
                __os.writeSize(0);
            }
            else
            {
                __os.writeSize(authors.size());
                for(String __elem : authors)
                {
                    __os.writeString(__elem);
                }
            }
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) A proxy for the new book.
     * 
     **/
    public BookPrx end_createBook(Ice.AsyncResult __result)
        throws BookExistsException
    {
        Ice.AsyncResult.__check(__result, this, __createBook_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(BookExistsException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        BookPrx __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = BookPrxHelper.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * Query based on the author name. The query is a partial match of
     * the author's name.
     * 
     * @param author The authors name.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param first The first set of results, up to n results.
     * 
     * @param nrows The total number of rows.
     * 
     * @param result The remainder of the results. If there are no
     * further results, a null proxy is returned.
     * 
     **/
    public void
    queryByAuthor(String author, int n, BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result)
    {
        queryByAuthor(author, n, first, nrows, result, null, false);
    }

    /**
     * Query based on the author name. The query is a partial match of
     * the author's name.
     * 
     * @param author The authors name.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param first The first set of results, up to n results.
     * 
     * @param nrows The total number of rows.
     * 
     * @param result The remainder of the results. If there are no
     * further results, a null proxy is returned.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    queryByAuthor(String author, int n, BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result, java.util.Map<String, String> __ctx)
    {
        queryByAuthor(author, n, first, nrows, result, __ctx, true);
    }

    private void
    queryByAuthor(String author, int n, BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("queryByAuthor");
                __delBase = __getDelegate(false);
                _LibraryDel __del = (_LibraryDel)__delBase;
                __del.queryByAuthor(author, n, first, nrows, result, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __queryByAuthor_name = "queryByAuthor";

    /**
     * Query based on the author name. The query is a partial match of
     * the author's name.
     * 
     * @param __cb The callback object for the operation.
     * @param author The authors name.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     **/
    public Ice.AsyncResult begin_queryByAuthor(String author, int n)
    {
        return begin_queryByAuthor(author, n, null, false, null);
    }

    /**
     * Query based on the author name. The query is a partial match of
     * the author's name.
     * 
     * @param __cb The callback object for the operation.
     * @param author The authors name.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryByAuthor(String author, int n, java.util.Map<String, String> __ctx)
    {
        return begin_queryByAuthor(author, n, __ctx, true, null);
    }

    /**
     * Query based on the author name. The query is a partial match of
     * the author's name.
     * 
     * @param __cb The callback object for the operation.
     * @param author The authors name.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     **/
    public Ice.AsyncResult begin_queryByAuthor(String author, int n, Ice.Callback __cb)
    {
        return begin_queryByAuthor(author, n, null, false, __cb);
    }

    /**
     * Query based on the author name. The query is a partial match of
     * the author's name.
     * 
     * @param __cb The callback object for the operation.
     * @param author The authors name.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryByAuthor(String author, int n, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryByAuthor(author, n, __ctx, true, __cb);
    }

    /**
     * Query based on the author name. The query is a partial match of
     * the author's name.
     * 
     * @param __cb The callback object for the operation.
     * @param author The authors name.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     **/
    public Ice.AsyncResult begin_queryByAuthor(String author, int n, Callback_Library_queryByAuthor __cb)
    {
        return begin_queryByAuthor(author, n, null, false, __cb);
    }

    /**
     * Query based on the author name. The query is a partial match of
     * the author's name.
     * 
     * @param __cb The callback object for the operation.
     * @param author The authors name.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryByAuthor(String author, int n, java.util.Map<String, String> __ctx, Callback_Library_queryByAuthor __cb)
    {
        return begin_queryByAuthor(author, n, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_queryByAuthor(String author, int n, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryByAuthor_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __queryByAuthor_name, __cb);
        try
        {
            __result.__prepare(__queryByAuthor_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(author);
            __os.writeInt(n);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param first The first set of results, up to n results.
     * 
     * @param nrows The total number of rows.
     * 
     * @param result The remainder of the results. If there are no
     * further results, a null proxy is returned.
     * 
     **/
    public void end_queryByAuthor(BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __queryByAuthor_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        first.value = BookDescriptionSeqHelper.read(__is);
        nrows.value = __is.readInt();
        result.value = BookQueryResultPrxHelper.__read(__is);
        __is.endReadEncaps();
    }

    /**
     * Query based on isbn number. The query is a partial match at the
     * start of the isbn number.
     * 
     * @param isbn The ISBN number.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param first The first set of results, up to n results.
     * 
     * @param nrows The total number of rows.
     * 
     * @param result The remainder of the results. If there are no
     * further results, a null proxy is returned.
     * 
     **/
    public void
    queryByIsbn(String isbn, int n, BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result)
    {
        queryByIsbn(isbn, n, first, nrows, result, null, false);
    }

    /**
     * Query based on isbn number. The query is a partial match at the
     * start of the isbn number.
     * 
     * @param isbn The ISBN number.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param first The first set of results, up to n results.
     * 
     * @param nrows The total number of rows.
     * 
     * @param result The remainder of the results. If there are no
     * further results, a null proxy is returned.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    queryByIsbn(String isbn, int n, BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result, java.util.Map<String, String> __ctx)
    {
        queryByIsbn(isbn, n, first, nrows, result, __ctx, true);
    }

    private void
    queryByIsbn(String isbn, int n, BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("queryByIsbn");
                __delBase = __getDelegate(false);
                _LibraryDel __del = (_LibraryDel)__delBase;
                __del.queryByIsbn(isbn, n, first, nrows, result, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __queryByIsbn_name = "queryByIsbn";

    /**
     * Query based on isbn number. The query is a partial match at the
     * start of the isbn number.
     * 
     * @param __cb The callback object for the operation.
     * @param isbn The ISBN number.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     **/
    public Ice.AsyncResult begin_queryByIsbn(String isbn, int n)
    {
        return begin_queryByIsbn(isbn, n, null, false, null);
    }

    /**
     * Query based on isbn number. The query is a partial match at the
     * start of the isbn number.
     * 
     * @param __cb The callback object for the operation.
     * @param isbn The ISBN number.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryByIsbn(String isbn, int n, java.util.Map<String, String> __ctx)
    {
        return begin_queryByIsbn(isbn, n, __ctx, true, null);
    }

    /**
     * Query based on isbn number. The query is a partial match at the
     * start of the isbn number.
     * 
     * @param __cb The callback object for the operation.
     * @param isbn The ISBN number.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     **/
    public Ice.AsyncResult begin_queryByIsbn(String isbn, int n, Ice.Callback __cb)
    {
        return begin_queryByIsbn(isbn, n, null, false, __cb);
    }

    /**
     * Query based on isbn number. The query is a partial match at the
     * start of the isbn number.
     * 
     * @param __cb The callback object for the operation.
     * @param isbn The ISBN number.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryByIsbn(String isbn, int n, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryByIsbn(isbn, n, __ctx, true, __cb);
    }

    /**
     * Query based on isbn number. The query is a partial match at the
     * start of the isbn number.
     * 
     * @param __cb The callback object for the operation.
     * @param isbn The ISBN number.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     **/
    public Ice.AsyncResult begin_queryByIsbn(String isbn, int n, Callback_Library_queryByIsbn __cb)
    {
        return begin_queryByIsbn(isbn, n, null, false, __cb);
    }

    /**
     * Query based on isbn number. The query is a partial match at the
     * start of the isbn number.
     * 
     * @param __cb The callback object for the operation.
     * @param isbn The ISBN number.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryByIsbn(String isbn, int n, java.util.Map<String, String> __ctx, Callback_Library_queryByIsbn __cb)
    {
        return begin_queryByIsbn(isbn, n, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_queryByIsbn(String isbn, int n, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryByIsbn_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __queryByIsbn_name, __cb);
        try
        {
            __result.__prepare(__queryByIsbn_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(isbn);
            __os.writeInt(n);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param first The first set of results, up to n results.
     * 
     * @param nrows The total number of rows.
     * 
     * @param result The remainder of the results. If there are no
     * further results, a null proxy is returned.
     * 
     **/
    public void end_queryByIsbn(BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __queryByIsbn_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        first.value = BookDescriptionSeqHelper.read(__is);
        nrows.value = __is.readInt();
        result.value = BookQueryResultPrxHelper.__read(__is);
        __is.endReadEncaps();
    }

    /**
     * Query based on the book title. The query is a partial match of
     * the book title.
     * 
     * @param author The authors name.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param first The first set of results, up to n results.
     * 
     * @param nrows The total number of rows.
     * 
     * @param result The remainder of the results. If there are no
     * further results, a null proxy is returned.
     * 
     **/
    public void
    queryByTitle(String title, int n, BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result)
    {
        queryByTitle(title, n, first, nrows, result, null, false);
    }

    /**
     * Query based on the book title. The query is a partial match of
     * the book title.
     * 
     * @param author The authors name.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param first The first set of results, up to n results.
     * 
     * @param nrows The total number of rows.
     * 
     * @param result The remainder of the results. If there are no
     * further results, a null proxy is returned.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    queryByTitle(String title, int n, BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result, java.util.Map<String, String> __ctx)
    {
        queryByTitle(title, n, first, nrows, result, __ctx, true);
    }

    private void
    queryByTitle(String title, int n, BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("queryByTitle");
                __delBase = __getDelegate(false);
                _LibraryDel __del = (_LibraryDel)__delBase;
                __del.queryByTitle(title, n, first, nrows, result, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __queryByTitle_name = "queryByTitle";

    /**
     * Query based on the book title. The query is a partial match of
     * the book title.
     * 
     * @param __cb The callback object for the operation.
     * @param n The number of rows to retrieve in the initial request.
     * 
     **/
    public Ice.AsyncResult begin_queryByTitle(String title, int n)
    {
        return begin_queryByTitle(title, n, null, false, null);
    }

    /**
     * Query based on the book title. The query is a partial match of
     * the book title.
     * 
     * @param __cb The callback object for the operation.
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryByTitle(String title, int n, java.util.Map<String, String> __ctx)
    {
        return begin_queryByTitle(title, n, __ctx, true, null);
    }

    /**
     * Query based on the book title. The query is a partial match of
     * the book title.
     * 
     * @param __cb The callback object for the operation.
     * @param n The number of rows to retrieve in the initial request.
     * 
     **/
    public Ice.AsyncResult begin_queryByTitle(String title, int n, Ice.Callback __cb)
    {
        return begin_queryByTitle(title, n, null, false, __cb);
    }

    /**
     * Query based on the book title. The query is a partial match of
     * the book title.
     * 
     * @param __cb The callback object for the operation.
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryByTitle(String title, int n, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryByTitle(title, n, __ctx, true, __cb);
    }

    /**
     * Query based on the book title. The query is a partial match of
     * the book title.
     * 
     * @param __cb The callback object for the operation.
     * @param n The number of rows to retrieve in the initial request.
     * 
     **/
    public Ice.AsyncResult begin_queryByTitle(String title, int n, Callback_Library_queryByTitle __cb)
    {
        return begin_queryByTitle(title, n, null, false, __cb);
    }

    /**
     * Query based on the book title. The query is a partial match of
     * the book title.
     * 
     * @param __cb The callback object for the operation.
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryByTitle(String title, int n, java.util.Map<String, String> __ctx, Callback_Library_queryByTitle __cb)
    {
        return begin_queryByTitle(title, n, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_queryByTitle(String title, int n, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryByTitle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __queryByTitle_name, __cb);
        try
        {
            __result.__prepare(__queryByTitle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(title);
            __os.writeInt(n);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param first The first set of results, up to n results.
     * 
     * @param nrows The total number of rows.
     * 
     * @param result The remainder of the results. If there are no
     * further results, a null proxy is returned.
     * 
     **/
    public void end_queryByTitle(BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __queryByTitle_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        first.value = BookDescriptionSeqHelper.read(__is);
        nrows.value = __is.readInt();
        result.value = BookQueryResultPrxHelper.__read(__is);
        __is.endReadEncaps();
    }

    public static LibraryPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        LibraryPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (LibraryPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    LibraryPrxHelper __h = new LibraryPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static LibraryPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        LibraryPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (LibraryPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    LibraryPrxHelper __h = new LibraryPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static LibraryPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        LibraryPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    LibraryPrxHelper __h = new LibraryPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static LibraryPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        LibraryPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    LibraryPrxHelper __h = new LibraryPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static LibraryPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        LibraryPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (LibraryPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                LibraryPrxHelper __h = new LibraryPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static LibraryPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        LibraryPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            LibraryPrxHelper __h = new LibraryPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Demo::Library",
        "::Ice::Object"
    };

    public static String
    ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _LibraryDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _LibraryDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, LibraryPrx v)
    {
        __os.writeProxy(v);
    }

    public static LibraryPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            LibraryPrxHelper result = new LibraryPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
