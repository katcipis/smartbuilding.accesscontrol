// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_LibraryDisp.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

/**
 * An interface to the library.
 * 
 **/
public abstract class _LibraryDisp extends Ice.ObjectImpl implements Library
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Demo::Library",
        "::Ice::Object"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[0];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[0];
    }

    public static String
    ice_staticId()
    {
        return __ids[0];
    }

    /**
     * Create a book with the given description.
     * 
     * @param description The book description.
     * 
     * @return A proxy for the new book.
     * 
     * @throws BookExistsException Raised if a book with the same ISBN
     * number already exists.
     * 
     **/
    public final BookPrx
    createBook(String isbn, String title, java.util.List<String> authors)
        throws BookExistsException
    {
        return createBook(isbn, title, authors, null);
    }

    /**
     * Query based on the author name. The query is a partial match of
     * the author's name.
     * 
     * @param author The authors name.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param first The first set of results, up to n results.
     * 
     * @param nrows The total number of rows.
     * 
     * @param result The remainder of the results. If there are no
     * further results, a null proxy is returned.
     * 
     **/
    public final void
    queryByAuthor(String author, int n, BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result)
    {
        queryByAuthor(author, n, first, nrows, result, null);
    }

    /**
     * Query based on isbn number. The query is a partial match at the
     * start of the isbn number.
     * 
     * @param isbn The ISBN number.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param first The first set of results, up to n results.
     * 
     * @param nrows The total number of rows.
     * 
     * @param result The remainder of the results. If there are no
     * further results, a null proxy is returned.
     * 
     **/
    public final void
    queryByIsbn(String isbn, int n, BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result)
    {
        queryByIsbn(isbn, n, first, nrows, result, null);
    }

    /**
     * Query based on the book title. The query is a partial match of
     * the book title.
     * 
     * @param author The authors name.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param first The first set of results, up to n results.
     * 
     * @param nrows The total number of rows.
     * 
     * @param result The remainder of the results. If there are no
     * further results, a null proxy is returned.
     * 
     **/
    public final void
    queryByTitle(String title, int n, BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result)
    {
        queryByTitle(title, n, first, nrows, result, null);
    }

    public static Ice.DispatchStatus
    ___queryByIsbn(Library __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String isbn;
        isbn = __is.readString();
        int n;
        n = __is.readInt();
        __is.endReadEncaps();
        BookDescriptionSeqHolder first = new BookDescriptionSeqHolder();
        Ice.IntHolder nrows = new Ice.IntHolder();
        BookQueryResultPrxHolder result = new BookQueryResultPrxHolder();
        IceInternal.BasicStream __os = __inS.os();
        __obj.queryByIsbn(isbn, n, first, nrows, result, __current);
        BookDescriptionSeqHelper.write(__os, first.value);
        __os.writeInt(nrows.value);
        BookQueryResultPrxHelper.__write(__os, result.value);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___queryByAuthor(Library __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String author;
        author = __is.readString();
        int n;
        n = __is.readInt();
        __is.endReadEncaps();
        BookDescriptionSeqHolder first = new BookDescriptionSeqHolder();
        Ice.IntHolder nrows = new Ice.IntHolder();
        BookQueryResultPrxHolder result = new BookQueryResultPrxHolder();
        IceInternal.BasicStream __os = __inS.os();
        __obj.queryByAuthor(author, n, first, nrows, result, __current);
        BookDescriptionSeqHelper.write(__os, first.value);
        __os.writeInt(nrows.value);
        BookQueryResultPrxHelper.__write(__os, result.value);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___queryByTitle(Library __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String title;
        title = __is.readString();
        int n;
        n = __is.readInt();
        __is.endReadEncaps();
        BookDescriptionSeqHolder first = new BookDescriptionSeqHolder();
        Ice.IntHolder nrows = new Ice.IntHolder();
        BookQueryResultPrxHolder result = new BookQueryResultPrxHolder();
        IceInternal.BasicStream __os = __inS.os();
        __obj.queryByTitle(title, n, first, nrows, result, __current);
        BookDescriptionSeqHelper.write(__os, first.value);
        __os.writeInt(nrows.value);
        BookQueryResultPrxHelper.__write(__os, result.value);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___createBook(Library __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String isbn;
        isbn = __is.readString();
        String title;
        title = __is.readString();
        java.util.List<String> authors;
        authors = new java.util.LinkedList<String>();
        final int __len0 = __is.readAndCheckSeqSize(1);
        for(int __i0 = 0; __i0 < __len0; __i0++)
        {
            String __elem;
            __elem = __is.readString();
            authors.add(__elem);
        }
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            BookPrx __ret = __obj.createBook(isbn, title, authors, __current);
            BookPrxHelper.__write(__os, __ret);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(BookExistsException ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "createBook",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "queryByAuthor",
        "queryByIsbn",
        "queryByTitle"
    };

    public Ice.DispatchStatus
    __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___createBook(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
            case 5:
            {
                return ___queryByAuthor(this, in, __current);
            }
            case 6:
            {
                return ___queryByIsbn(this, in, __current);
            }
            case 7:
            {
                return ___queryByTitle(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type Demo::Library was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type Demo::Library was not generated with stream support";
        throw ex;
    }
}
