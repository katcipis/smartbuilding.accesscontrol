// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_LibraryOperationsNC.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

/**
 * An interface to the library.
 * 
 **/
public interface _LibraryOperationsNC
{
    /**
     * Query based on isbn number. The query is a partial match at the
     * start of the isbn number.
     * 
     * @param isbn The ISBN number.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param first The first set of results, up to n results.
     * 
     * @param nrows The total number of rows.
     * 
     * @param result The remainder of the results. If there are no
     * further results, a null proxy is returned.
     * 
     **/
    void queryByIsbn(String isbn, int n, BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result);

    /**
     * Query based on the author name. The query is a partial match of
     * the author's name.
     * 
     * @param author The authors name.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param first The first set of results, up to n results.
     * 
     * @param nrows The total number of rows.
     * 
     * @param result The remainder of the results. If there are no
     * further results, a null proxy is returned.
     * 
     **/
    void queryByAuthor(String author, int n, BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result);

    /**
     * Query based on the book title. The query is a partial match of
     * the book title.
     * 
     * @param author The authors name.
     * 
     * @param n The number of rows to retrieve in the initial request.
     * 
     * @param first The first set of results, up to n results.
     * 
     * @param nrows The total number of rows.
     * 
     * @param result The remainder of the results. If there are no
     * further results, a null proxy is returned.
     * 
     **/
    void queryByTitle(String title, int n, BookDescriptionSeqHolder first, Ice.IntHolder nrows, BookQueryResultPrxHolder result);

    /**
     * Create a book with the given description.
     * 
     * @param description The book description.
     * 
     * @return A proxy for the new book.
     * 
     * @throws BookExistsException Raised if a book with the same ISBN
     * number already exists.
     * 
     **/
    BookPrx createBook(String isbn, String title, java.util.List<String> authors)
        throws BookExistsException;
}
