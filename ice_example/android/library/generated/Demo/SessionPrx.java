// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `SessionPrx.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

/**
 * The session object. This is used to retrieve a per-session library
 * on behalf of the client. If the session is not refreshed on a
 * periodic basis, it will be automatically destroyed.
 * 
 **/
public interface SessionPrx extends Ice.ObjectPrx
{
    /**
     * Get the library object.
     * 
     * @return A proxy for the new library.
     * 
     **/
    public LibraryPrx getLibrary();

    /**
     * Get the library object.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for the new library.
     * 
     **/
    public LibraryPrx getLibrary(java.util.Map<String, String> __ctx);

    /**
     * Get the library object.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLibrary();

    /**
     * Get the library object.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLibrary(java.util.Map<String, String> __ctx);

    /**
     * Get the library object.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLibrary(Ice.Callback __cb);

    /**
     * Get the library object.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLibrary(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Get the library object.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLibrary(Callback_Session_getLibrary __cb);

    /**
     * Get the library object.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLibrary(java.util.Map<String, String> __ctx, Callback_Session_getLibrary __cb);

    /**
     * Get the library object.
     * 
     * @param __result The asynchronous result object.
     * @return A proxy for the new library.
     * 
     **/
    public LibraryPrx end_getLibrary(Ice.AsyncResult __result);

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     **/
    public void refresh();

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void refresh(java.util.Map<String, String> __ctx);

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refresh();

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refresh(java.util.Map<String, String> __ctx);

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refresh(Ice.Callback __cb);

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refresh(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refresh(Callback_Session_refresh __cb);

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_refresh(java.util.Map<String, String> __ctx, Callback_Session_refresh __cb);

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __result The asynchronous result object.
     **/
    public void end_refresh(Ice.AsyncResult __result);

    /**
     * Destroy the session.
     * 
     **/
    public void destroy();

    /**
     * Destroy the session.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void destroy(java.util.Map<String, String> __ctx);

    /**
     * Destroy the session.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_destroy();

    /**
     * Destroy the session.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx);

    /**
     * Destroy the session.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_destroy(Ice.Callback __cb);

    /**
     * Destroy the session.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Destroy the session.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_destroy(Callback_Session_destroy __cb);

    /**
     * Destroy the session.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Callback_Session_destroy __cb);

    /**
     * Destroy the session.
     * 
     * @param __result The asynchronous result object.
     **/
    public void end_destroy(Ice.AsyncResult __result);
}
