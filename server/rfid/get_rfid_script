#!/usr/bin/env python
# -*- coding: utf-8 -*-
# this script goes in /etc/gtagEventor
# DBUS service

import sys, os
import dbus
import dbus.service
import dbus.mainloop.glib
import gobject

_RFID_READER_INTERFACE = 'br.ufsc.AccessControl.RFIDReader'

class RFIDReader(dbus.service.Object):
    '''
    Will emit a DBus signal whith the given rfid.    
    '''

    def __init__(self, bus, rfid):
        dbus.service.Object.__init__(self, bus, '/RFIDReader')
        self.new_rfid(rfid)

    @dbus.service.signal(dbus_interface='br.ufsc.AccessControl.RFIDReader',
                         signature='s')
    def new_rfid(self, rfid):
        print('Emiting new_rfid[{0}]'.format(rfid))


if __name__ == '__main__':
 
    if len(sys.argv) < 4:
        exit()

    if sys.argv[3] != 'IN':
        exit()

    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    bus = dbus.SessionBus()
    rfid = sys.argv[2]
    loop = gobject.MainLoop()

    #Python has closure too ;-)
    def quit_loop(rfid):
        print('Received rfid[{0}]'.format(rfid))
        loop.quit()

    def emit_new_rfid_signal():
        RFIDReader(bus, rfid)

    #lets connect to the signal and emmit it later.
    bus.add_signal_receiver(quit_loop, dbus_interface = _RFID_READER_INTERFACE, signal_name = "new_rfid")
    gobject.timeout_add(100, emit_new_rfid_signal)

    loop.run()

